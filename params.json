{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"Basic runtime monitoring and program restart for Go programs.","body":"### Introduction\r\n`monitor` provides basic runtime monitoring for Go programs. It is\r\nbased on [monitor.py](https://github.com/kisom/pymods/blob/master/monitor.py),\r\na Python module originally written to ensure a Bitcoin broker continued\r\nrunning even in the face of unanticipated exceptions. \r\n\r\n### Overview\r\nThe `monitor.Monitor` function takes a target function with the signature:\r\n\r\n```go\r\nfunc target() error {}\r\n```\r\n\r\nIt is assumed the target function will use configuration files, `os.Args`,\r\nenvironment variables, or some other mechanism to configure itself.\r\n\r\nWhen the target function returns, `monitor` checks whether an error has\r\noccurred and whether a panic has occurred, and sends a notification in\r\neither case. If the function exits with no errors and hasn't panicked,\r\n`monitor` assumes the program exits normally. This behaviour may be changed\r\nby modifying the CanExit value in the package:\r\n\r\n```go\r\nmonitor.CanExit = false     // disable exit on clean return\r\nmonitor.CanExit = true      // enable exit on clean return\r\n```\r\n\r\n### Example Usage\r\n\r\n```go\r\n\r\nfunc target() {\r\n        // self-contained main program code\r\n}\r\n\r\nfunc main() {\r\n        monitor.Monitor(target)\r\n}\r\n```\r\n","name":"gomon"}